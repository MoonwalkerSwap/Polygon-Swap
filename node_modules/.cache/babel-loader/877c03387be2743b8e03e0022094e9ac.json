{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar JSBI = _interopDefault(require('jsbi'));\n\nvar invariant = _interopDefault(require('tiny-invariant'));\n\nvar warning = _interopDefault(require('tiny-warning'));\n\nvar address = require('@ethersproject/address');\n\nvar _Big = _interopDefault(require('big.js'));\n\nvar toFormat = _interopDefault(require('toformat'));\n\nvar _Decimal = _interopDefault(require('decimal.js-light'));\n\nvar solidity = require('@ethersproject/solidity');\n\nvar contracts = require('@ethersproject/contracts');\n\nvar networks = require('@ethersproject/networks');\n\nvar providers = require('@ethersproject/providers');\n\nvar IMoonWalkerSwapPair = _interopDefault(require('moonwalkerswap-libs-core/build/contracts/IMoonWalkerSwapPair.json'));\n\nvar _SOLIDITY_TYPE_MAXIMA;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 137] = \"MAINNET\";\n})(exports.ChainId || (exports.ChainId = {}));\n\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(exports.TradeType || (exports.TradeType = {}));\n\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(exports.Rounding || (exports.Rounding = {}));\n\nvar FACTORY_ADDRESS = '0x4196b2750d7f7d2220e094663f56225837dca618'; //\n\nvar INIT_CODE_HASH = '45008c7e5aa16c30dc1978fbdf7c089f8441df584f52f5e960301959ff09bd63';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\nvar THREE = /*#__PURE__*/JSBI.BigInt(3);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\nvar TEN = /*#__PURE__*/JSBI.BigInt(10);\n\nvar _100 = /*#__PURE__*/JSBI.BigInt(100);\n\nvar FEES_NUMERATOR = /*#__PURE__*/JSBI.BigInt(9975);\nvar FEES_DENOMINATOR = /*#__PURE__*/JSBI.BigInt(10000);\nvar SolidityType;\n\n(function (SolidityType) {\n  SolidityType[\"uint8\"] = \"uint8\";\n  SolidityType[\"uint256\"] = \"uint256\";\n})(SolidityType || (SolidityType = {}));\n\nvar SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[SolidityType.uint8] = /*#__PURE__*/JSBI.BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[SolidityType.uint256] = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n} // see https://stackoverflow.com/a/41102306\n\n\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n\n  function InsufficientReservesError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\n\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n\n  function InsufficientInputAmountError() {\n    var _this2;\n\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction validateSolidityTypeInstance(value, solidityType) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? invariant(false, value + \" is not a \" + solidityType + \".\") : void 0;\n  !JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]) ? invariant(false, value + \" is not a \" + solidityType + \".\") : void 0;\n} // warns if addresses are not checksummed\n\n\nfunction validateAndParseAddress(address$1) {\n  try {\n    var checksummedAddress = address.getAddress(address$1);\n    \"development\" !== \"production\" ? warning(address$1 === checksummedAddress, address$1 + \" is not checksummed.\") : void 0;\n    return checksummedAddress;\n  } catch (error) {\n    invariant(false, address$1 + \" is not a valid address.\");\n  }\n}\n\nfunction parseBigintIsh(bigintIsh) {\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh);\n} // mock the on-chain sqrt function\n\n\nfunction sqrt(y) {\n  validateSolidityTypeInstance(y, SolidityType.uint256);\n  var z = ZERO;\n  var x;\n\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y;\n    x = JSBI.add(JSBI.divide(y, TWO), ONE);\n\n    while (JSBI.lessThan(x, z)) {\n      z = x;\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE;\n  }\n\n  return z;\n} // given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\n\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? invariant(false, 'MAX_SIZE_ZERO') : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? invariant(false, 'ITEMS_SIZE') : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    var lo = 0,\n        hi = items.length;\n\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\n\n\nvar Currency =\n/**\r\n * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction Currency(decimals, symbol, name) {\n  validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n/**\r\n * The only instance of the base class `Currency`.\r\n */\n\n\nCurrency.ETHER = /*#__PURE__*/new Currency(18, 'MATIC', 'Polygon');\nvar ETHER = Currency.ETHER;\n\nvar _WETH;\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\n\n\nvar Token = /*#__PURE__*/function (_Currency) {\n  _inheritsLoose(Token, _Currency);\n\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n\n    _this = _Currency.call(this, decimals, symbol, name) || this;\n    _this.chainId = chainId;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n\n\n  var _proto = Token.prototype;\n\n  _proto.equals = function equals(other) {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\n  ;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? invariant(false, 'CHAIN_IDS') : void 0;\n    !(this.address !== other.address) ? invariant(false, 'ADDRESSES') : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  };\n\n  return Token;\n}(Currency);\n/**\r\n * Compares two currencies for equality\r\n */\n\n\nfunction currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n\nvar WETH = (_WETH = {}, _WETH[exports.ChainId.MAINNET] = /*#__PURE__*/new Token(exports.ChainId.MAINNET, '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 18, 'WMATIC', 'Wrapped MATIC'), _WETH);\n\nvar _toSignificantRoundin, _toFixedRounding;\n\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[exports.Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[exports.Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[exports.Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[exports.Rounding.ROUND_DOWN] = 0, _toFixedRounding[exports.Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[exports.Rounding.ROUND_UP] = 3, _toFixedRounding);\n\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = ONE;\n    }\n\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  } // performs floor division\n\n\n  var _proto = Fraction.prototype;\n\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n\n  _proto.add = function add(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.subtract = function subtract(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.multiply = function multiply(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.divide = function divide(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(significantDigits) ? invariant(false, significantDigits + \" is not an integer.\") : void 0;\n    !(significantDigits > 0) ? invariant(false, significantDigits + \" is not positive.\") : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(decimalPlaces) ? invariant(false, decimalPlaces + \" is not an integer.\") : void 0;\n    !(decimalPlaces >= 0) ? invariant(false, decimalPlaces + \" is negative.\") : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  };\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]);\n\n  return Fraction;\n}();\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\n\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction); // amount _must_ be raw, i.e. in the native representation\n\n\n  function CurrencyAmount(currency, amount) {\n    var _this;\n\n    var parsedAmount = parseBigintIsh(amount);\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\n    _this = _Fraction.call(this, parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals))) || this;\n    _this.currency = currency;\n    return _this;\n  }\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\n\n\n  CurrencyAmount.ether = function ether(amount) {\n    return new CurrencyAmount(ETHER, amount);\n  };\n\n  var _proto = CurrencyAmount.prototype;\n\n  _proto.add = function add(other) {\n    !currencyEquals(this.currency, other.currency) ? invariant(false, 'TOKEN') : void 0;\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !currencyEquals(this.currency, other.currency) ? invariant(false, 'TOKEN') : void 0;\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_DOWN;\n    }\n\n    return _Fraction.prototype.toSignificant.call(this, significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_DOWN;\n    }\n\n    !(decimalPlaces <= this.currency.decimals) ? invariant(false, 'DECIMALS') : void 0;\n    return _Fraction.prototype.toFixed.call(this, decimalPlaces, format, rounding);\n  };\n\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  };\n\n  _createClass(CurrencyAmount, [{\n    key: \"raw\",\n    get: function get() {\n      return this.numerator;\n    }\n  }]);\n\n  return CurrencyAmount;\n}(Fraction);\n\nvar TokenAmount = /*#__PURE__*/function (_CurrencyAmount) {\n  _inheritsLoose(TokenAmount, _CurrencyAmount); // amount _must_ be raw, i.e. in the native representation\n\n\n  function TokenAmount(token, amount) {\n    var _this;\n\n    _this = _CurrencyAmount.call(this, token, amount) || this;\n    _this.token = token;\n    return _this;\n  }\n\n  var _proto = TokenAmount.prototype;\n\n  _proto.add = function add(other) {\n    !this.token.equals(other.token) ? invariant(false, 'TOKEN') : void 0;\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !this.token.equals(other.token) ? invariant(false, 'TOKEN') : void 0;\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\n  };\n\n  return TokenAmount;\n}(CurrencyAmount);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction); // denominator and numerator _must_ be raw, i.e. in the native representation\n\n\n  function Price(baseCurrency, quoteCurrency, denominator, numerator) {\n    var _this;\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n\n  Price.fromRoute = function fromRoute(route) {\n    var prices = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(route.pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n    }\n\n    return prices.slice(1).reduce(function (accumulator, currentValue) {\n      return accumulator.multiply(currentValue);\n    }, prices[0]);\n  };\n\n  var _proto = Price.prototype;\n\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  };\n\n  _proto.multiply = function multiply(other) {\n    !currencyEquals(this.quoteCurrency, other.baseCurrency) ? invariant(false, 'TOKEN') : void 0;\n\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  } // performs floor division on overflow\n  ;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyEquals(currencyAmount.currency, this.baseCurrency) ? invariant(false, 'TOKEN') : void 0;\n\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, _Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n    }\n\n    return CurrencyAmount.ether(_Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  };\n\n  _createClass(Price, [{\n    key: \"raw\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n\n  return Price;\n}(Fraction);\n\nvar PAIR_ADDRESS_CACHE = {};\n\nvar Pair = /*#__PURE__*/function () {\n  function Pair(tokenAmountA, tokenAmountB) {\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token), 18, 'UNI-V2', 'Uniswap V2');\n    this.tokenAmounts = tokenAmounts;\n  }\n\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    var _PAIR_ADDRESS_CACHE, _PAIR_ADDRESS_CACHE$t;\n\n    var tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\n\n    if (((_PAIR_ADDRESS_CACHE = PAIR_ADDRESS_CACHE) == null ? void 0 : (_PAIR_ADDRESS_CACHE$t = _PAIR_ADDRESS_CACHE[tokens[0].address]) == null ? void 0 : _PAIR_ADDRESS_CACHE$t[tokens[1].address]) === undefined) {\n      var _PAIR_ADDRESS_CACHE2, _extends2, _extends3;\n\n      PAIR_ADDRESS_CACHE = _extends({}, PAIR_ADDRESS_CACHE, (_extends3 = {}, _extends3[tokens[0].address] = _extends({}, (_PAIR_ADDRESS_CACHE2 = PAIR_ADDRESS_CACHE) == null ? void 0 : _PAIR_ADDRESS_CACHE2[tokens[0].address], (_extends2 = {}, _extends2[tokens[1].address] = address.getCreate2Address(FACTORY_ADDRESS, solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [tokens[0].address, tokens[1].address])]), INIT_CODE_HASH), _extends2)), _extends3));\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\n  }\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\n  ;\n\n  var _proto = Pair.prototype;\n\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\n  ;\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\n\n\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? invariant(false, 'TOKEN') : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\n  ;\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? invariant(false, 'TOKEN') : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.token) ? invariant(false, 'TOKEN') : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n\n    var inputReserve = this.reserveOf(inputAmount.token);\n    var outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee);\n    var outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.token) ? invariant(false, 'TOKEN') : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO) || JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {\n      throw new InsufficientReservesError();\n    }\n\n    var outputReserve = this.reserveOf(outputAmount.token);\n    var inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR);\n    var inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.token.equals(this.liquidityToken) ? invariant(false, 'LIQUIDITY') : void 0;\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1)) ? invariant(false, 'TOKEN') : void 0;\n    var liquidity;\n\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return new TokenAmount(this.liquidityToken, liquidity);\n  };\n\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n\n    !this.involvesToken(token) ? invariant(false, 'TOKEN') : void 0;\n    !totalSupply.token.equals(this.liquidityToken) ? invariant(false, 'TOTAL_SUPPLY') : void 0;\n    !liquidity.token.equals(this.liquidityToken) ? invariant(false, 'LIQUIDITY') : void 0;\n    !JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw) ? invariant(false, 'LIQUIDITY') : void 0;\n    var totalSupplyAdjusted;\n\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? invariant(false, 'K_LAST') : void 0;\n      var kLastParsed = parseBigintIsh(kLast);\n\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\n        var rootKLast = sqrt(kLastParsed);\n\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));\n  };\n\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\n\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n\n  return Pair;\n}();\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    !(pairs.length > 0) ? invariant(false, 'PAIRS') : void 0;\n    !pairs.every(function (pair) {\n      return pair.chainId === pairs[0].chainId;\n    }) ? invariant(false, 'CHAIN_IDS') : void 0;\n    !(input instanceof Token && pairs[0].involvesToken(input) || input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])) ? invariant(false, 'INPUT') : void 0;\n    !(typeof output === 'undefined' || output instanceof Token && pairs[pairs.length - 1].involvesToken(output) || output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])) ? invariant(false, 'OUTPUT') : void 0;\n    var path = [input instanceof Token ? input : WETH[pairs[0].chainId]];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? invariant(false, 'PATH') : void 0;\n\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n\n      path.push(_output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.midPrice = Price.fromRoute(this);\n    this.input = input;\n    this.output = output != null ? output : path[path.length - 1];\n  }\n\n  _createClass(Route, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n\n  return Route;\n}();\n\nvar _100_PERCENT = /*#__PURE__*/new Fraction(_100);\n\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n\n  function Percent() {\n    return _Fraction.apply(this, arguments) || this;\n  }\n\n  var _proto = Percent.prototype;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  };\n\n  return Percent;\n}(Fraction);\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\n\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var exactQuote = midPrice.raw.multiply(inputAmount.raw); // calculate slippage := (exactQuote - outputAmount) / exactQuote\n\n  var slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\n  return new Percent(slippage.numerator, slippage.denominator);\n} // comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !currencyEquals(a.inputAmount.currency, b.inputAmount.currency) ? invariant(false, 'INPUT_CURRENCY') : void 0;\n  !currencyEquals(a.outputAmount.currency, b.outputAmount.currency) ? invariant(false, 'OUTPUT_CURRENCY') : void 0;\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\n\n\nfunction wrappedAmount(currencyAmount, chainId) {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw);\n  invariant(false, 'CURRENCY');\n}\n\nfunction wrappedCurrency(currency, chainId) {\n  if (currency instanceof Token) return currency;\n  if (currency === ETHER) return WETH[chainId];\n  invariant(false, 'CURRENCY');\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\n\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    var amounts = new Array(route.path.length);\n    var nextPairs = new Array(route.pairs.length);\n\n    if (tradeType === exports.TradeType.EXACT_INPUT) {\n      !currencyEquals(amount.currency, route.input) ? invariant(false, 'INPUT') : void 0;\n      amounts[0] = wrappedAmount(amount, route.chainId);\n\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n\n        var _pair$getOutputAmount = pair.getOutputAmount(amounts[i]),\n            outputAmount = _pair$getOutputAmount[0],\n            nextPair = _pair$getOutputAmount[1];\n\n        amounts[i + 1] = outputAmount;\n        nextPairs[i] = nextPair;\n      }\n    } else {\n      !currencyEquals(amount.currency, route.output) ? invariant(false, 'OUTPUT') : void 0;\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\n\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n\n        var _pair$getInputAmount = _pair.getInputAmount(amounts[_i]),\n            inputAmount = _pair$getInputAmount[0],\n            _nextPair = _pair$getInputAmount[1];\n\n        amounts[_i - 1] = inputAmount;\n        nextPairs[_i - 1] = _nextPair;\n      }\n    }\n\n    this.route = route;\n    this.tradeType = tradeType;\n    this.inputAmount = tradeType === exports.TradeType.EXACT_INPUT ? amount : route.input === ETHER ? CurrencyAmount.ether(amounts[0].raw) : amounts[0];\n    this.outputAmount = tradeType === exports.TradeType.EXACT_OUTPUT ? amount : route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1];\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\n\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, exports.TradeType.EXACT_INPUT);\n  }\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\n  ;\n\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, exports.TradeType.EXACT_OUTPUT);\n  }\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  var _proto = Trade.prototype;\n\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? invariant(false, 'SLIPPAGE_TOLERANCE') : void 0;\n\n    if (this.tradeType === exports.TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;\n      return this.outputAmount instanceof TokenAmount ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(slippageAdjustedAmountOut);\n    }\n  }\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? invariant(false, 'SLIPPAGE_TOLERANCE') : void 0;\n\n    if (this.tradeType === exports.TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\n      return this.inputAmount instanceof TokenAmount ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(slippageAdjustedAmountIn);\n    }\n  }\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, // used in recursion.\n  currentPairs, originalAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$maxNumResults = _ref.maxNumResults,\n        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n        _ref$maxHops = _ref.maxHops,\n        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountIn === void 0) {\n      originalAmountIn = currencyAmountIn;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? invariant(false, 'PAIRS') : void 0;\n    !(maxHops > 0) ? invariant(false, 'MAX_HOPS') : void 0;\n    !(originalAmountIn === currencyAmountIn || currentPairs.length > 0) ? invariant(false, 'INVALID_RECURSION') : void 0;\n    var chainId = currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined;\n    !(chainId !== undefined) ? invariant(false, 'CHAIN_ID') : void 0;\n    var amountIn = wrappedAmount(currencyAmountIn, chainId);\n    var tokenOut = wrappedCurrency(currencyOut, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n\n      try {\n        ;\n\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), originalAmountIn.currency, currencyOut), originalAmountIn, exports.TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, amountOut, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), originalAmountIn, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  }\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, // used in recursion.\n  currentPairs, originalAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$maxNumResults = _ref2.maxNumResults,\n        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n        _ref2$maxHops = _ref2.maxHops,\n        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountOut === void 0) {\n      originalAmountOut = currencyAmountOut;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? invariant(false, 'PAIRS') : void 0;\n    !(maxHops > 0) ? invariant(false, 'MAX_HOPS') : void 0;\n    !(originalAmountOut === currencyAmountOut || currentPairs.length > 0) ? invariant(false, 'INVALID_RECURSION') : void 0;\n    var chainId = currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined;\n    !(chainId !== undefined) ? invariant(false, 'CHAIN_ID') : void 0;\n    var amountOut = wrappedAmount(currencyAmountOut, chainId);\n    var tokenIn = wrappedCurrency(currencyIn, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n\n      try {\n        ;\n\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, originalAmountOut.currency), originalAmountOut, exports.TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, amountIn, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), originalAmountOut, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n\n  return Trade;\n}();\n\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.raw.toString(16);\n}\n\nvar ZERO_HEX = '0x0';\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Router() {}\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\n\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency === ETHER;\n    var etherOut = trade.outputAmount.currency === ETHER; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? invariant(false, 'ETHER_IN_OUT') : void 0;\n    !(options.ttl > 0) ? invariant(false, 'TTL') : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n\n    switch (trade.tradeType) {\n      case exports.TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n\n      case exports.TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? invariant(false, 'EXACT_OUT_FOT') : void 0;\n\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n    }\n\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n\n  return Router;\n}();\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar runtime_1 = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var runtime = function (exports) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n    function define(obj, key, value) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n      return obj[key];\n    }\n\n    try {\n      // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n      define({}, \"\");\n    } catch (err) {\n      define = function (obj, key, value) {\n        return obj[key] = value;\n      };\n    }\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n\n    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: \"normal\",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: \"throw\",\n          arg: err\n        };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n\n    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n\n    function Generator() {}\n\n    function GeneratorFunction() {}\n\n    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n\n\n    var IteratorPrototype = {};\n    define(IteratorPrototype, iteratorSymbol, function () {\n      return this;\n    });\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = GeneratorFunctionPrototype;\n    define(Gp, \"constructor\", GeneratorFunctionPrototype);\n    define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        define(prototype, method, function (arg) {\n          return this._invoke(method, arg);\n        });\n      });\n    }\n\n    exports.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n\n    exports.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n      }\n\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    }; // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n\n\n    exports.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n\n    function AsyncIterator(generator, PromiseImpl) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n\n          if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n            return PromiseImpl.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return PromiseImpl.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function (error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      } // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n\n\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n      return this;\n    });\n    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n\n    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n      if (PromiseImpl === void 0) PromiseImpl = Promise;\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          } // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted; // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    } // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          // Note: [\"return\"] must be used for ES3 parsing compatibility.\n          if (delegate.iterator[\"return\"]) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n        context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      } // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n\n\n      context.delegate = null;\n      return ContinueSentinel;\n    } // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n\n\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n    define(Gp, iteratorSymbol, function () {\n      return this;\n    });\n    define(Gp, \"toString\", function () {\n      return \"[object Generator]\";\n    });\n\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    exports.keys = function (object) {\n      var keys = [];\n\n      for (var key in object) {\n        keys.push(key);\n      }\n\n      keys.reverse(); // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        } // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n\n\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined$1;\n            next.done = true;\n            return next;\n          };\n\n          return next.next = next;\n        }\n      } // Return an iterator with no values.\n\n\n      return {\n        next: doneResult\n      };\n    }\n\n    exports.values = values;\n\n    function doneResult() {\n      return {\n        value: undefined$1,\n        done: true\n      };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n      reset: function (skipTempReset) {\n        this.prev = 0;\n        this.next = 0; // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n        this.method = \"next\";\n        this.arg = undefined$1;\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n      stop: function () {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n      dispatchException: function (exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n      abrupt: function (type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n      complete: function (record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n      finish: function (finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      \"catch\": function (tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n\n            return thrown;\n          }\n        } // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n\n\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function (iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n\n        return ContinueSentinel;\n      }\n    }; // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n\n    return exports;\n  }( // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  module.exports);\n\n  try {\n    regeneratorRuntime = runtime;\n  } catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, in modern engines\n    // we can explicitly access globalThis. In older engines we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    if (typeof globalThis === \"object\") {\n      globalThis.regeneratorRuntime = runtime;\n    } else {\n      Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n    }\n  }\n});\nvar ERC20 = [{\n  constant: true,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: true,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\nvar _TOKEN_DECIMALS_CACHE;\n\nvar TOKEN_DECIMALS_CACHE = (_TOKEN_DECIMALS_CACHE = {}, _TOKEN_DECIMALS_CACHE[exports.ChainId.MAINNET] = {\n  '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n\n}, _TOKEN_DECIMALS_CACHE);\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\n\nvar Fetcher = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Fetcher() {}\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\n\n\n  Fetcher.fetchTokenData = /*#__PURE__*/function () {\n    var _fetchTokenData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(chainId, address, provider, symbol, name) {\n      var _TOKEN_DECIMALS_CACHE2, _TOKEN_DECIMALS_CACHE3;\n\n      var parsedDecimals;\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (provider === void 0) {\n                provider = /*#__PURE__*/providers.getDefaultProvider( /*#__PURE__*/networks.getNetwork(chainId));\n              }\n\n              if (!(typeof ((_TOKEN_DECIMALS_CACHE2 = TOKEN_DECIMALS_CACHE) == null ? void 0 : (_TOKEN_DECIMALS_CACHE3 = _TOKEN_DECIMALS_CACHE2[chainId]) == null ? void 0 : _TOKEN_DECIMALS_CACHE3[address]) === 'number')) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.t0 = TOKEN_DECIMALS_CACHE[chainId][address];\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.next = 7;\n              return new contracts.Contract(address, ERC20, provider).decimals().then(function (decimals) {\n                var _TOKEN_DECIMALS_CACHE4, _extends2, _extends3;\n\n                TOKEN_DECIMALS_CACHE = _extends({}, TOKEN_DECIMALS_CACHE, (_extends3 = {}, _extends3[chainId] = _extends({}, (_TOKEN_DECIMALS_CACHE4 = TOKEN_DECIMALS_CACHE) == null ? void 0 : _TOKEN_DECIMALS_CACHE4[chainId], (_extends2 = {}, _extends2[address] = decimals, _extends2)), _extends3));\n                return decimals;\n              });\n\n            case 7:\n              _context.t0 = _context.sent;\n\n            case 8:\n              parsedDecimals = _context.t0;\n              return _context.abrupt(\"return\", new Token(chainId, address, parsedDecimals, symbol, name));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchTokenData(_x, _x2, _x3, _x4, _x5) {\n      return _fetchTokenData.apply(this, arguments);\n    }\n\n    return fetchTokenData;\n  }()\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\n  ;\n\n  Fetcher.fetchPairData = /*#__PURE__*/function () {\n    var _fetchPairData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(tokenA, tokenB, provider) {\n      var address, _yield$Contract$getRe, reserves0, reserves1, balances;\n\n      return runtime_1.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (provider === void 0) {\n                provider = /*#__PURE__*/providers.getDefaultProvider( /*#__PURE__*/networks.getNetwork(tokenA.chainId));\n              }\n\n              !(tokenA.chainId === tokenB.chainId) ? invariant(false, 'CHAIN_ID') : void 0;\n              address = Pair.getAddress(tokenA, tokenB);\n              _context2.next = 5;\n              return new contracts.Contract(address, IMoonWalkerSwapPair.abi, provider).getReserves();\n\n            case 5:\n              _yield$Contract$getRe = _context2.sent;\n              reserves0 = _yield$Contract$getRe[0];\n              reserves1 = _yield$Contract$getRe[1];\n              balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\n              return _context2.abrupt(\"return\", new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1])));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function fetchPairData(_x6, _x7, _x8) {\n      return _fetchPairData.apply(this, arguments);\n    }\n\n    return fetchPairData;\n  }();\n\n  return Fetcher;\n}();\n\nexports.JSBI = JSBI;\nexports.Currency = Currency;\nexports.CurrencyAmount = CurrencyAmount;\nexports.ETHER = ETHER;\nexports.FACTORY_ADDRESS = FACTORY_ADDRESS;\nexports.Fetcher = Fetcher;\nexports.Fraction = Fraction;\nexports.INIT_CODE_HASH = INIT_CODE_HASH;\nexports.InsufficientInputAmountError = InsufficientInputAmountError;\nexports.InsufficientReservesError = InsufficientReservesError;\nexports.MINIMUM_LIQUIDITY = MINIMUM_LIQUIDITY;\nexports.Pair = Pair;\nexports.Percent = Percent;\nexports.Price = Price;\nexports.Route = Route;\nexports.Router = Router;\nexports.Token = Token;\nexports.TokenAmount = TokenAmount;\nexports.Trade = Trade;\nexports.WETH = WETH;\nexports.currencyEquals = currencyEquals;\nexports.inputOutputComparator = inputOutputComparator;\nexports.tradeComparator = tradeComparator;","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../node_modules/regenerator-runtime/runtime.js","../src/fetcher.ts"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SolidityType","SOLIDITY_TYPE_MAXIMA","CAN_SET_PROTOTYPE","InsufficientReservesError","Object","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","validateAndParseAddress","address","checksummedAddress","getAddress","parseBigintIsh","bigintIsh","sqrt","y","z","x","sortedInsert","items","add","maxSize","comparator","isFull","lo","hi","mid","Currency","ETHER","Token","equals","other","sortsBefore","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","Big","toSignificantRounding","toFixedRounding","Fraction","denominator","invert","otherParsed","subtract","lessThan","equalTo","greaterThan","multiply","divide","toSignificant","format","groupSeparator","rounding","ROUND_HALF_UP","Number","significantDigits","precision","quotient","toFixed","decimalPlaces","CurrencyAmount","parsedAmount","currency","ROUND_DOWN","decimals","toExact","TokenAmount","Price","prices","i","pair","route","accumulator","baseCurrency","quoteCurrency","fraction","quote","currencyAmount","PAIR_ADDRESS_CACHE","Pair","tokens","tokenA","getCreate2Address","keccak256","pack","tokenAmounts","tokenAmountB","involvesToken","token","priceOf","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","numerator","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","pairs","input","output","path","currentInput","_100_PERCENT","Percent","exactQuote","midPrice","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","Trade","amounts","nextPairs","tradeType","amount","wrappedAmount","nextPair","computePriceImpact","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","maxNumResults","maxHops","currentPairs","originalAmountIn","currencyAmountIn","bestTrades","chainId","currencyOut","amountIn","tokenOut","wrappedCurrency","amountOut","error","pairsExcludingThisPair","originalAmountOut","currencyAmountOut","currencyIn","tokenIn","ZERO_HEX","Router","etherIn","trade","etherOut","options","to","toHex","deadline","Math","useFeeOnTransfer","Boolean","methodName","args","undefined","TOKEN_DECIMALS_CACHE","Fetcher","provider","getDefaultProvider","getNetwork","parsedDecimals","Contract","tokenB","reserves0","reserves1","IMoonWalkerSwapPair","balances"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 137\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x4196b2750d7f7d2220e094663f56225837dca618'\n//\nexport const INIT_CODE_HASH = '45008c7e5aa16c30dc1978fbdf7c089f8441df584f52f5e960301959ff09bd63'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'MATIC', 'Polygon')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IMoonWalkerSwapPair from 'moonwalkerswap-libs-core/build/contracts/IMoonWalkerSwapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IMoonWalkerSwapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}