{"ast":null,"code":"'use strict';\n\nvar varint = require('varint');\n\nvar _require = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require.toString;\n\nvar _require2 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require2.fromString;\n\nmodule.exports = {\n  numberToUint8Array: numberToUint8Array,\n  uint8ArrayToNumber: uint8ArrayToNumber,\n  varintUint8ArrayEncode: varintUint8ArrayEncode,\n  varintEncode: varintEncode\n};\n/**\n * @param {Uint8Array} buf\n */\n\nfunction uint8ArrayToNumber(buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16);\n}\n/**\n * @param {number} num\n */\n\n\nfunction numberToUint8Array(num) {\n  var hexString = num.toString(16);\n\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString;\n  }\n\n  return uint8ArrayFromString(hexString, 'base16');\n}\n/**\n * @param {Uint8Array} input\n */\n\n\nfunction varintUint8ArrayEncode(input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)));\n}\n/**\n * @param {number} num\n */\n\n\nfunction varintEncode(num) {\n  return Uint8Array.from(varint.encode(num));\n}","map":{"version":3,"sources":["/Users/warrenmason/Documents/MoonWalkerSwap/FINAL/MoonWalkerSwap-Interface-new/node_modules/cids/node_modules/multicodec/src/util.js"],"names":["varint","require","uint8ArrayToString","toString","uint8ArrayFromString","fromString","module","exports","numberToUint8Array","uint8ArrayToNumber","varintUint8ArrayEncode","varintEncode","buf","parseInt","num","hexString","length","input","Uint8Array","from","encode"],"mappings":"AAAA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,eAAyCA,OAAO,CAAC,uBAAD,CAAhD;AAAA,IAAkBC,kBAAlB,YAAQC,QAAR;;AACA,gBAA6CF,OAAO,CAAC,yBAAD,CAApD;AAAA,IAAoBG,oBAApB,aAAQC,UAAR;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,kBAAkB,EAAlBA,kBADe;AAEfC,EAAAA,kBAAkB,EAAlBA,kBAFe;AAGfC,EAAAA,sBAAsB,EAAtBA,sBAHe;AAIfC,EAAAA,YAAY,EAAZA;AAJe,CAAjB;AAOA;AACA;AACA;;AACA,SAASF,kBAAT,CAA6BG,GAA7B,EAAkC;AAChC,SAAOC,QAAQ,CAACX,kBAAkB,CAACU,GAAD,EAAM,QAAN,CAAnB,EAAoC,EAApC,CAAf;AACD;AAED;AACA;AACA;;;AACA,SAASJ,kBAAT,CAA6BM,GAA7B,EAAkC;AAChC,MAAIC,SAAS,GAAGD,GAAG,CAACX,QAAJ,CAAa,EAAb,CAAhB;;AACA,MAAIY,SAAS,CAACC,MAAV,GAAmB,CAAnB,KAAyB,CAA7B,EAAgC;AAC9BD,IAAAA,SAAS,GAAG,MAAMA,SAAlB;AACD;;AACD,SAAOX,oBAAoB,CAACW,SAAD,EAAY,QAAZ,CAA3B;AACD;AAED;AACA;AACA;;;AACA,SAASL,sBAAT,CAAiCO,KAAjC,EAAwC;AACtC,SAAOC,UAAU,CAACC,IAAX,CAAgBnB,MAAM,CAACoB,MAAP,CAAcX,kBAAkB,CAACQ,KAAD,CAAhC,CAAhB,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASN,YAAT,CAAuBG,GAAvB,EAA4B;AAC1B,SAAOI,UAAU,CAACC,IAAX,CAAgBnB,MAAM,CAACoB,MAAP,CAAcN,GAAd,CAAhB,CAAP;AACD","sourcesContent":["'use strict'\n\nconst varint = require('varint')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nmodule.exports = {\n  numberToUint8Array,\n  uint8ArrayToNumber,\n  varintUint8ArrayEncode,\n  varintEncode\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction uint8ArrayToNumber (buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16)\n}\n\n/**\n * @param {number} num\n */\nfunction numberToUint8Array (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return uint8ArrayFromString(hexString, 'base16')\n}\n\n/**\n * @param {Uint8Array} input\n */\nfunction varintUint8ArrayEncode (input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))\n}\n\n/**\n * @param {number} num\n */\nfunction varintEncode (num) {\n  return Uint8Array.from(varint.encode(num))\n}\n"]},"metadata":{},"sourceType":"script"}