{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst equal_1 = require(\"../../runtime/equal\");\n\nconst error = {\n  message: \"must be equal to constant\",\n  params: ({\n    schemaCode\n  }) => codegen_1._`{allowedValue: ${schemaCode}}`\n};\nconst def = {\n  keyword: \"const\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      data,\n      $data,\n      schemaCode,\n      schema\n    } = cxt;\n\n    if ($data || schema && typeof schema == \"object\") {\n      cxt.fail$data(codegen_1._`!${util_1.useFunc(gen, equal_1.default)}(${data}, ${schemaCode})`);\n    } else {\n      cxt.fail(codegen_1._`${schema} !== ${data}`);\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/const.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAIA,MAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE,2BAD2B;AAEpC,EAAA,MAAM,EAAE,CAAC;AAAC,IAAA;AAAD,GAAD,KAAkB,SAAA,CAAA,CAAC,kBAAkB,UAAU;AAFnB,CAAtC;AAKA,MAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,OADwB;AAEjC,EAAA,KAAK,EAAE,IAF0B;AAGjC,EAAA,KAHiC;;AAIjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAClB,UAAM;AAAC,MAAA,GAAD;AAAM,MAAA,IAAN;AAAY,MAAA,KAAZ;AAAmB,MAAA,UAAnB;AAA+B,MAAA;AAA/B,QAAyC,GAA/C;;AACA,QAAI,KAAK,IAAK,MAAM,IAAI,OAAO,MAAP,IAAiB,QAAzC,EAAoD;AAClD,MAAA,GAAG,CAAC,SAAJ,CAAc,SAAA,CAAA,CAAC,IAAI,MAAA,CAAA,OAAA,CAAQ,GAAR,EAAa,OAAA,CAAA,OAAb,CAAmB,IAAI,IAAI,KAAK,UAAU,GAA7D;AACD,KAFD,MAEO;AACL,MAAA,GAAG,CAAC,IAAJ,CAAS,SAAA,CAAA,CAAC,GAAG,MAAM,QAAQ,IAAI,EAA/B;AACD;AACF;;AAXgC,CAAnC;AAcA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst equal_1 = require(\"../../runtime/equal\");\nconst error = {\n    message: \"must be equal to constant\",\n    params: ({ schemaCode }) => codegen_1._ `{allowedValue: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"const\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, $data, schemaCode, schema } = cxt;\n        if ($data || (schema && typeof schema == \"object\")) {\n            cxt.fail$data(codegen_1._ `!${util_1.useFunc(gen, equal_1.default)}(${data}, ${schemaCode})`);\n        }\n        else {\n            cxt.fail(codegen_1._ `${schema} !== ${data}`);\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=const.js.map"]},"metadata":{},"sourceType":"script"}