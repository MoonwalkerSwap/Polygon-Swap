{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UsersModel = exports.Users = void 0;\n\nconst core_1 = require(\"../core\");\n\nclass Users extends core_1.CrowdinApi {\n  /**\n   *\n   * @param projectId project identifier\n   * @param search search users by firstName, lastName or username\n   * @param role defines role type\n   * @param languageId language identifier\n   * @param limit maximum number of items to retrieve (default 25)\n   * @param offset starting offset in the collection (default 0)\n   */\n  listProjectMembers(projectId, search, role, languageId, limit, offset) {\n    let url = `${this.url}/projects/${projectId}/members`;\n    url = this.addQueryParam(url, 'search', search);\n    url = this.addQueryParam(url, 'role', role);\n    url = this.addQueryParam(url, 'languageId', languageId);\n    return this.getList(url, limit, offset);\n  }\n  /**\n   *\n   * @param projectId project identifier\n   * @param request request body\n   */\n\n\n  addProjectMember(projectId, request) {\n    const url = `${this.url}/projects/${projectId}/members`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   *\n   * @param projectId project identifier\n   * @param memberId member identifier\n   */\n\n\n  getProjectMemberPermissions(projectId, memberId) {\n    const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   *\n   * @param projectId project identifier\n   * @param memberId member identifier\n   */\n\n\n  replaceProjectMemberPermissions(projectId, memberId, request) {\n    const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n    return this.put(url, request, this.defaultConfig());\n  }\n  /**\n   *\n   * @param projectId project identifier\n   * @param memberId member identifier\n   */\n\n\n  deleteMemberFromProject(projectId, memberId) {\n    const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param status filter users by status\n   * @param search search users by firstName, lastName, username, email\n   * @param twoFactor filter users by two-factor authentication status\n   * @param limit maximum number of items to retrieve (default 25)\n   * @param offset starting offset in the collection (default 0)\n   */\n\n\n  listUsers(status, search, twoFactor, limit, offset) {\n    let url = `${this.url}/users`;\n    url = this.addQueryParam(url, 'status', status);\n    url = this.addQueryParam(url, 'search', search);\n    url = this.addQueryParam(url, 'twoFactor', twoFactor);\n    return this.getList(url, limit, offset);\n  }\n  /**\n   * @param userId user identifier\n   */\n\n\n  getUserInfo(userId) {\n    const url = `${this.url}/users/${userId}`;\n    return this.get(url, this.defaultConfig());\n  }\n\n  getAuthenticatedUser() {\n    const url = `${this.url}/user`;\n    return this.get(url, this.defaultConfig());\n  }\n\n}\n\nexports.Users = Users;\nvar UsersModel;\n\n(function (UsersModel) {\n  let Status;\n\n  (function (Status) {\n    Status[\"ACTIVE\"] = \"active\";\n    Status[\"PENDING\"] = \"pending\";\n    Status[\"BLOCKED\"] = \"blocked\";\n  })(Status = UsersModel.Status || (UsersModel.Status = {}));\n\n  let TwoFactor;\n\n  (function (TwoFactor) {\n    TwoFactor[\"ENABLED\"] = \"enabled\";\n    TwoFactor[\"DISABLED\"] = \"disabled\";\n  })(TwoFactor = UsersModel.TwoFactor || (UsersModel.TwoFactor = {}));\n\n  let Role;\n\n  (function (Role) {\n    Role[\"ALL\"] = \"all\";\n    Role[\"MANAGER\"] = \"manager\";\n    Role[\"PROOFREADER\"] = \"proofreader\";\n    Role[\"TRANSLATOR\"] = \"translator\";\n    Role[\"BLOCKED\"] = \"blocked\";\n  })(Role = UsersModel.Role || (UsersModel.Role = {}));\n})(UsersModel = exports.UsersModel || (exports.UsersModel = {}));","map":{"version":3,"sources":["/Users/warrenmason/Downloads/Final Versions/Polygon/Polygon-MoonWalkerSwap-Interface/node_modules/@crowdin/crowdin-api-client/out/users/index.js"],"names":["Object","defineProperty","exports","value","UsersModel","Users","core_1","require","CrowdinApi","listProjectMembers","projectId","search","role","languageId","limit","offset","url","addQueryParam","getList","addProjectMember","request","post","defaultConfig","getProjectMemberPermissions","memberId","get","replaceProjectMemberPermissions","put","deleteMemberFromProject","delete","listUsers","status","twoFactor","getUserInfo","userId","getAuthenticatedUser","Status","TwoFactor","Role"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UsersModel = exports.Users = void 0;\nconst core_1 = require(\"../core\");\nclass Users extends core_1.CrowdinApi {\n    /**\n     *\n     * @param projectId project identifier\n     * @param search search users by firstName, lastName or username\n     * @param role defines role type\n     * @param languageId language identifier\n     * @param limit maximum number of items to retrieve (default 25)\n     * @param offset starting offset in the collection (default 0)\n     */\n    listProjectMembers(projectId, search, role, languageId, limit, offset) {\n        let url = `${this.url}/projects/${projectId}/members`;\n        url = this.addQueryParam(url, 'search', search);\n        url = this.addQueryParam(url, 'role', role);\n        url = this.addQueryParam(url, 'languageId', languageId);\n        return this.getList(url, limit, offset);\n    }\n    /**\n     *\n     * @param projectId project identifier\n     * @param request request body\n     */\n    addProjectMember(projectId, request) {\n        const url = `${this.url}/projects/${projectId}/members`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     *\n     * @param projectId project identifier\n     * @param memberId member identifier\n     */\n    getProjectMemberPermissions(projectId, memberId) {\n        const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     *\n     * @param projectId project identifier\n     * @param memberId member identifier\n     */\n    replaceProjectMemberPermissions(projectId, memberId, request) {\n        const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n        return this.put(url, request, this.defaultConfig());\n    }\n    /**\n     *\n     * @param projectId project identifier\n     * @param memberId member identifier\n     */\n    deleteMemberFromProject(projectId, memberId) {\n        const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param status filter users by status\n     * @param search search users by firstName, lastName, username, email\n     * @param twoFactor filter users by two-factor authentication status\n     * @param limit maximum number of items to retrieve (default 25)\n     * @param offset starting offset in the collection (default 0)\n     */\n    listUsers(status, search, twoFactor, limit, offset) {\n        let url = `${this.url}/users`;\n        url = this.addQueryParam(url, 'status', status);\n        url = this.addQueryParam(url, 'search', search);\n        url = this.addQueryParam(url, 'twoFactor', twoFactor);\n        return this.getList(url, limit, offset);\n    }\n    /**\n     * @param userId user identifier\n     */\n    getUserInfo(userId) {\n        const url = `${this.url}/users/${userId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    getAuthenticatedUser() {\n        const url = `${this.url}/user`;\n        return this.get(url, this.defaultConfig());\n    }\n}\nexports.Users = Users;\nvar UsersModel;\n(function (UsersModel) {\n    let Status;\n    (function (Status) {\n        Status[\"ACTIVE\"] = \"active\";\n        Status[\"PENDING\"] = \"pending\";\n        Status[\"BLOCKED\"] = \"blocked\";\n    })(Status = UsersModel.Status || (UsersModel.Status = {}));\n    let TwoFactor;\n    (function (TwoFactor) {\n        TwoFactor[\"ENABLED\"] = \"enabled\";\n        TwoFactor[\"DISABLED\"] = \"disabled\";\n    })(TwoFactor = UsersModel.TwoFactor || (UsersModel.TwoFactor = {}));\n    let Role;\n    (function (Role) {\n        Role[\"ALL\"] = \"all\";\n        Role[\"MANAGER\"] = \"manager\";\n        Role[\"PROOFREADER\"] = \"proofreader\";\n        Role[\"TRANSLATOR\"] = \"translator\";\n        Role[\"BLOCKED\"] = \"blocked\";\n    })(Role = UsersModel.Role || (UsersModel.Role = {}));\n})(UsersModel = exports.UsersModel || (exports.UsersModel = {}));\n"]},"metadata":{},"sourceType":"script"}