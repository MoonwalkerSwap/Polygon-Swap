{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar _regeneratorRuntime = require(\"/Users/warrenmason/Documents/MoonWalkerSwap/FINAL/MoonWalkerSwap-Interface-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/Users/warrenmason/Documents/MoonWalkerSwap/FINAL/MoonWalkerSwap-Interface-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"/Users/warrenmason/Documents/MoonWalkerSwap/FINAL/MoonWalkerSwap-Interface-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = void 0;\n\nvar util_1 = require(\"../util\");\n\nvar rxjs_1 = require(\"rxjs\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\n\n\nfunction encrypt(_x, _x2) {\n  return _encrypt.apply(this, arguments);\n}\n\nfunction _encrypt() {\n  _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(plainText, secret) {\n    var ivBytes, secretKey, enc, encryptedResult, tagLength, authTag, encryptedPlaintext, authTagBytes, encryptedPlaintextBytes, concatted;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(secret.length !== 64)) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw Error(\"secret must be 256 bits\");\n\n          case 2:\n            ivBytes = crypto.getRandomValues(new Uint8Array(12));\n            _context2.next = 5;\n            return crypto.subtle.importKey(\"raw\", util_1.hexStringToUint8Array(secret), {\n              \"name\": \"aes-gcm\"\n            }, false, [\"encrypt\", \"decrypt\"]);\n\n          case 5:\n            secretKey = _context2.sent;\n            enc = new TextEncoder(); // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n\n            _context2.next = 9;\n            return window.crypto.subtle.encrypt({\n              name: \"AES-GCM\",\n              iv: ivBytes\n            }, secretKey, enc.encode(plainText));\n\n          case 9:\n            encryptedResult = _context2.sent;\n            tagLength = 16;\n            authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n            encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n            authTagBytes = new Uint8Array(authTag);\n            encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n            concatted = new Uint8Array([].concat(_toConsumableArray(ivBytes), _toConsumableArray(authTagBytes), _toConsumableArray(encryptedPlaintextBytes)));\n            return _context2.abrupt(\"return\", util_1.uint8ArrayToHex(concatted));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encrypt.apply(this, arguments);\n}\n\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\n\nfunction decrypt(cipherText, secret) {\n  if (secret.length !== 64) throw Error(\"secret must be 256 bits\");\n  return new rxjs_1.Observable(function (subscriber) {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var secretKey, encrypted, ivBytes, authTagBytes, encryptedPlaintextBytes, concattedBytes, algo, decrypted, decoder;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return crypto.subtle.importKey(\"raw\", util_1.hexStringToUint8Array(secret), {\n                \"name\": \"aes-gcm\"\n              }, false, [\"encrypt\", \"decrypt\"]);\n\n            case 2:\n              secretKey = _context.sent;\n              encrypted = util_1.hexStringToUint8Array(cipherText);\n              ivBytes = encrypted.slice(0, 12);\n              authTagBytes = encrypted.slice(12, 28);\n              encryptedPlaintextBytes = encrypted.slice(28);\n              concattedBytes = new Uint8Array([].concat(_toConsumableArray(encryptedPlaintextBytes), _toConsumableArray(authTagBytes)));\n              algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes)\n              };\n              _context.next = 11;\n              return window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n\n            case 11:\n              decrypted = _context.sent;\n              decoder = new TextDecoder();\n              subscriber.next(decoder.decode(decrypted));\n              subscriber.complete();\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  });\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"sources":["/Users/warrenmason/Documents/MoonWalkerSwap/FINAL/MoonWalkerSwap-Interface-new/node_modules/walletlink/dist/relay/aes256gcm.js"],"names":["Object","defineProperty","exports","value","decrypt","encrypt","util_1","require","rxjs_1","plainText","secret","length","Error","ivBytes","crypto","getRandomValues","Uint8Array","subtle","importKey","hexStringToUint8Array","secretKey","enc","TextEncoder","window","name","iv","encode","encryptedResult","tagLength","authTag","slice","byteLength","encryptedPlaintext","authTagBytes","encryptedPlaintextBytes","concatted","uint8ArrayToHex","cipherText","Observable","subscriber","encrypted","concattedBytes","algo","decrypted","decoder","TextDecoder","next","decode","complete"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decrypt = exports.encrypt = void 0;\nconst util_1 = require(\"../util\");\nconst rxjs_1 = require(\"rxjs\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\nasync function encrypt(plainText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n    const secretKey = await crypto.subtle.importKey(\"raw\", util_1.hexStringToUint8Array(secret), { \"name\": \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n    const enc = new TextEncoder();\n    // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n    const encryptedResult = await window.crypto.subtle.encrypt({\n        name: \"AES-GCM\",\n        iv: ivBytes\n    }, secretKey, enc.encode(plainText));\n    const tagLength = 16;\n    const authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n    const encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n    const authTagBytes = new Uint8Array(authTag);\n    const encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n    const concatted = new Uint8Array([...ivBytes, ...authTagBytes, ...encryptedPlaintextBytes]);\n    return util_1.uint8ArrayToHex(concatted);\n}\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\nfunction decrypt(cipherText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    return new rxjs_1.Observable((subscriber) => {\n        (async () => {\n            const secretKey = await crypto.subtle.importKey(\"raw\", util_1.hexStringToUint8Array(secret), { \"name\": \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n            const encrypted = util_1.hexStringToUint8Array(cipherText);\n            const ivBytes = encrypted.slice(0, 12);\n            const authTagBytes = encrypted.slice(12, 28);\n            const encryptedPlaintextBytes = encrypted.slice(28);\n            const concattedBytes = new Uint8Array([...encryptedPlaintextBytes, ...authTagBytes]);\n            const algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes)\n            };\n            const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n            const decoder = new TextDecoder();\n            subscriber.next(decoder.decode(decrypted));\n            subscriber.complete();\n        })();\n    });\n}\nexports.decrypt = decrypt;\n"]},"metadata":{},"sourceType":"script"}