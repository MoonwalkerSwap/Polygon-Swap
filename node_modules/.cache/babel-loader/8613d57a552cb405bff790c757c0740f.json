{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\n\nconst codegen_1 = require(\"../codegen\");\n\nconst util_1 = require(\"../util\");\n\nfunction getSubschema(it, {\n  keyword,\n  schemaProp,\n  schema,\n  schemaPath,\n  errSchemaPath,\n  topSchemaRef\n}) {\n  if (keyword !== undefined && schema !== undefined) {\n    throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n  }\n\n  if (keyword !== undefined) {\n    const sch = it.schema[keyword];\n    return schemaProp === undefined ? {\n      schema: sch,\n      schemaPath: codegen_1._`${it.schemaPath}${codegen_1.getProperty(keyword)}`,\n      errSchemaPath: `${it.errSchemaPath}/${keyword}`\n    } : {\n      schema: sch[schemaProp],\n      schemaPath: codegen_1._`${it.schemaPath}${codegen_1.getProperty(keyword)}${codegen_1.getProperty(schemaProp)}`,\n      errSchemaPath: `${it.errSchemaPath}/${keyword}/${util_1.escapeFragment(schemaProp)}`\n    };\n  }\n\n  if (schema !== undefined) {\n    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n      throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n    }\n\n    return {\n      schema,\n      schemaPath,\n      topSchemaRef,\n      errSchemaPath\n    };\n  }\n\n  throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\n\nexports.getSubschema = getSubschema;\n\nfunction extendSubschemaData(subschema, it, {\n  dataProp,\n  dataPropType: dpType,\n  data,\n  dataTypes,\n  propertyName\n}) {\n  if (data !== undefined && dataProp !== undefined) {\n    throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n  }\n\n  const {\n    gen\n  } = it;\n\n  if (dataProp !== undefined) {\n    const {\n      errorPath,\n      dataPathArr,\n      opts\n    } = it;\n    const nextData = gen.let(\"data\", codegen_1._`${it.data}${codegen_1.getProperty(dataProp)}`, true);\n    dataContextProps(nextData);\n    subschema.errorPath = codegen_1.str`${errorPath}${util_1.getErrorPath(dataProp, dpType, opts.jsPropertySyntax)}`;\n    subschema.parentDataProperty = codegen_1._`${dataProp}`;\n    subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];\n  }\n\n  if (data !== undefined) {\n    const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n\n    dataContextProps(nextData);\n    if (propertyName !== undefined) subschema.propertyName = propertyName; // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n  }\n\n  if (dataTypes) subschema.dataTypes = dataTypes;\n\n  function dataContextProps(_nextData) {\n    subschema.data = _nextData;\n    subschema.dataLevel = it.dataLevel + 1;\n    subschema.dataTypes = [];\n    it.definedProperties = new Set();\n    subschema.parentData = it.data;\n    subschema.dataNames = [...it.dataNames, _nextData];\n  }\n}\n\nexports.extendSubschemaData = extendSubschemaData;\n\nfunction extendSubschemaMode(subschema, {\n  jtdDiscriminator,\n  jtdMetadata,\n  compositeRule,\n  createErrors,\n  allErrors\n}) {\n  if (compositeRule !== undefined) subschema.compositeRule = compositeRule;\n  if (createErrors !== undefined) subschema.createErrors = createErrors;\n  if (allErrors !== undefined) subschema.allErrors = allErrors;\n  subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n\n  subschema.jtdMetadata = jtdMetadata; // not inherited\n}\n\nexports.extendSubschemaMode = extendSubschemaMode;","map":{"version":3,"sources":["../../../lib/compile/validate/subschema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nfunction getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {\n    if (keyword !== undefined && schema !== undefined) {\n        throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n    }\n    if (keyword !== undefined) {\n        const sch = it.schema[keyword];\n        return schemaProp === undefined\n            ? {\n                schema: sch,\n                schemaPath: codegen_1._ `${it.schemaPath}${codegen_1.getProperty(keyword)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n            }\n            : {\n                schema: sch[schemaProp],\n                schemaPath: codegen_1._ `${it.schemaPath}${codegen_1.getProperty(keyword)}${codegen_1.getProperty(schemaProp)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}/${util_1.escapeFragment(schemaProp)}`,\n            };\n    }\n    if (schema !== undefined) {\n        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n            throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n        }\n        return {\n            schema,\n            schemaPath,\n            topSchemaRef,\n            errSchemaPath,\n        };\n    }\n    throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\nexports.getSubschema = getSubschema;\nfunction extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {\n    if (data !== undefined && dataProp !== undefined) {\n        throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n    }\n    const { gen } = it;\n    if (dataProp !== undefined) {\n        const { errorPath, dataPathArr, opts } = it;\n        const nextData = gen.let(\"data\", codegen_1._ `${it.data}${codegen_1.getProperty(dataProp)}`, true);\n        dataContextProps(nextData);\n        subschema.errorPath = codegen_1.str `${errorPath}${util_1.getErrorPath(dataProp, dpType, opts.jsPropertySyntax)}`;\n        subschema.parentDataProperty = codegen_1._ `${dataProp}`;\n        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];\n    }\n    if (data !== undefined) {\n        const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n        dataContextProps(nextData);\n        if (propertyName !== undefined)\n            subschema.propertyName = propertyName;\n        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n    }\n    if (dataTypes)\n        subschema.dataTypes = dataTypes;\n    function dataContextProps(_nextData) {\n        subschema.data = _nextData;\n        subschema.dataLevel = it.dataLevel + 1;\n        subschema.dataTypes = [];\n        it.definedProperties = new Set();\n        subschema.parentData = it.data;\n        subschema.dataNames = [...it.dataNames, _nextData];\n    }\n}\nexports.extendSubschemaData = extendSubschemaData;\nfunction extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {\n    if (compositeRule !== undefined)\n        subschema.compositeRule = compositeRule;\n    if (createErrors !== undefined)\n        subschema.createErrors = createErrors;\n    if (allErrors !== undefined)\n        subschema.allErrors = allErrors;\n    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n    subschema.jtdMetadata = jtdMetadata; // not inherited\n}\nexports.extendSubschemaMode = extendSubschemaMode;\n//# sourceMappingURL=subschema.js.map"]},"metadata":{},"sourceType":"script"}