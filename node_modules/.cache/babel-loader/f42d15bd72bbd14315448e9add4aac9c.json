{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst code_1 = require(\"../code\");\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst error = {\n  message: ({\n    schemaCode\n  }) => codegen_1.str`must match pattern \"${schemaCode}\"`,\n  params: ({\n    schemaCode\n  }) => codegen_1._`{pattern: ${schemaCode}}`\n};\nconst def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      data,\n      $data,\n      schema,\n      schemaCode,\n      it\n    } = cxt; // TODO regexp should be wrapped in try/catchs\n\n    const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    const regExp = $data ? codegen_1._`(new RegExp(${schemaCode}, ${u}))` : code_1.usePattern(cxt, schema);\n    cxt.fail$data(codegen_1._`!${regExp}.test(${data})`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/pattern.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAIA,MAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE,CAAC;AAAC,IAAA;AAAD,GAAD,KAAkB,SAAA,CAAA,GAAG,uBAAuB,UAAU,GAD3B;AAEpC,EAAA,MAAM,EAAE,CAAC;AAAC,IAAA;AAAD,GAAD,KAAkB,SAAA,CAAA,CAAC,aAAa,UAAU;AAFd,CAAtC;AAKA,MAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,SADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KALiC;;AAMjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAClB,UAAM;AAAC,MAAA,IAAD;AAAO,MAAA,KAAP;AAAc,MAAA,MAAd;AAAsB,MAAA,UAAtB;AAAkC,MAAA;AAAlC,QAAwC,GAA9C,CADkB,CAElB;;AACA,UAAM,CAAC,GAAG,EAAE,CAAC,IAAH,CAAQ,aAAR,GAAwB,GAAxB,GAA8B,EAAxC;AACA,UAAM,MAAM,GAAG,KAAK,GAAG,SAAA,CAAA,CAAC,eAAe,UAAU,KAAK,CAAC,IAAnC,GAA0C,MAAA,CAAA,UAAA,CAAW,GAAX,EAAgB,MAAhB,CAA9D;AACA,IAAA,GAAG,CAAC,SAAJ,CAAc,SAAA,CAAA,CAAC,IAAI,MAAM,SAAS,IAAI,GAAtC;AACD;;AAZgC,CAAnC;AAeA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => codegen_1.str `must match pattern \"${schemaCode}\"`,\n    params: ({ schemaCode }) => codegen_1._ `{pattern: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"pattern\",\n    type: \"string\",\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { data, $data, schema, schemaCode, it } = cxt;\n        // TODO regexp should be wrapped in try/catchs\n        const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n        const regExp = $data ? codegen_1._ `(new RegExp(${schemaCode}, ${u}))` : code_1.usePattern(cxt, schema);\n        cxt.fail$data(codegen_1._ `!${regExp}.test(${data})`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=pattern.js.map"]},"metadata":{},"sourceType":"script"}