{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAdditionalItems = void 0;\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: ({\n    params: {\n      len\n    }\n  }) => codegen_1.str`must NOT have more than ${len} items`,\n  params: ({\n    params: {\n      len\n    }\n  }) => codegen_1._`{limit: ${len}}`\n};\nconst def = {\n  keyword: \"additionalItems\",\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  before: \"uniqueItems\",\n  error,\n\n  code(cxt) {\n    const {\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      items\n    } = parentSchema;\n\n    if (!Array.isArray(items)) {\n      util_1.checkStrictMode(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas');\n      return;\n    }\n\n    validateAdditionalItems(cxt, items);\n  }\n\n};\n\nfunction validateAdditionalItems(cxt, items) {\n  const {\n    gen,\n    schema,\n    data,\n    keyword,\n    it\n  } = cxt;\n  it.items = true;\n  const len = gen.const(\"len\", codegen_1._`${data}.length`);\n\n  if (schema === false) {\n    cxt.setParams({\n      len: items.length\n    });\n    cxt.pass(codegen_1._`${len} <= ${items.length}`);\n  } else if (typeof schema == \"object\" && !util_1.alwaysValidSchema(it, schema)) {\n    const valid = gen.var(\"valid\", codegen_1._`${len} <= ${items.length}`); // TODO var\n\n    gen.if(codegen_1.not(valid), () => validateItems(valid));\n    cxt.ok(valid);\n  }\n\n  function validateItems(valid) {\n    gen.forRange(\"i\", items.length, len, i => {\n      cxt.subschema({\n        keyword,\n        dataProp: i,\n        dataPropType: util_1.Type.Num\n      }, valid);\n      if (!it.allErrors) gen.if(codegen_1.not(valid), () => gen.break());\n    });\n  }\n}\n\nexports.validateAdditionalItems = validateAdditionalItems;\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/additionalItems.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateAdditionalItems = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: ({ params: { len } }) => codegen_1.str `must NOT have more than ${len} items`,\n    params: ({ params: { len } }) => codegen_1._ `{limit: ${len}}`,\n};\nconst def = {\n    keyword: \"additionalItems\",\n    type: \"array\",\n    schemaType: [\"boolean\", \"object\"],\n    before: \"uniqueItems\",\n    error,\n    code(cxt) {\n        const { parentSchema, it } = cxt;\n        const { items } = parentSchema;\n        if (!Array.isArray(items)) {\n            util_1.checkStrictMode(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas');\n            return;\n        }\n        validateAdditionalItems(cxt, items);\n    },\n};\nfunction validateAdditionalItems(cxt, items) {\n    const { gen, schema, data, keyword, it } = cxt;\n    it.items = true;\n    const len = gen.const(\"len\", codegen_1._ `${data}.length`);\n    if (schema === false) {\n        cxt.setParams({ len: items.length });\n        cxt.pass(codegen_1._ `${len} <= ${items.length}`);\n    }\n    else if (typeof schema == \"object\" && !util_1.alwaysValidSchema(it, schema)) {\n        const valid = gen.var(\"valid\", codegen_1._ `${len} <= ${items.length}`); // TODO var\n        gen.if(codegen_1.not(valid), () => validateItems(valid));\n        cxt.ok(valid);\n    }\n    function validateItems(valid) {\n        gen.forRange(\"i\", items.length, len, (i) => {\n            cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);\n            if (!it.allErrors)\n                gen.if(codegen_1.not(valid), () => gen.break());\n        });\n    }\n}\nexports.validateAdditionalItems = validateAdditionalItems;\nexports.default = def;\n//# sourceMappingURL=additionalItems.js.map"]},"metadata":{},"sourceType":"script"}