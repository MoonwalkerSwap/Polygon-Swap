{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;\n\nconst codegen_1 = require(\"./codegen\");\n\nconst util_1 = require(\"./util\");\n\nconst names_1 = require(\"./names\");\n\nexports.keywordError = {\n  message: ({\n    keyword\n  }) => codegen_1.str`must pass \"${keyword}\" keyword validation`\n};\nexports.keyword$DataError = {\n  message: ({\n    keyword,\n    schemaType\n  }) => schemaType ? codegen_1.str`\"${keyword}\" keyword must be ${schemaType} ($data)` : codegen_1.str`\"${keyword}\" keyword is invalid ($data)`\n};\n\nfunction reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {\n  const {\n    it\n  } = cxt;\n  const {\n    gen,\n    compositeRule,\n    allErrors\n  } = it;\n  const errObj = errorObjectCode(cxt, error, errorPaths);\n\n  if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {\n    addError(gen, errObj);\n  } else {\n    returnErrors(it, codegen_1._`[${errObj}]`);\n  }\n}\n\nexports.reportError = reportError;\n\nfunction reportExtraError(cxt, error = exports.keywordError, errorPaths) {\n  const {\n    it\n  } = cxt;\n  const {\n    gen,\n    compositeRule,\n    allErrors\n  } = it;\n  const errObj = errorObjectCode(cxt, error, errorPaths);\n  addError(gen, errObj);\n\n  if (!(compositeRule || allErrors)) {\n    returnErrors(it, names_1.default.vErrors);\n  }\n}\n\nexports.reportExtraError = reportExtraError;\n\nfunction resetErrorsCount(gen, errsCount) {\n  gen.assign(names_1.default.errors, errsCount);\n  gen.if(codegen_1._`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign(codegen_1._`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));\n}\n\nexports.resetErrorsCount = resetErrorsCount;\n\nfunction extendErrors({\n  gen,\n  keyword,\n  schemaValue,\n  data,\n  errsCount,\n  it\n}) {\n  /* istanbul ignore if */\n  if (errsCount === undefined) throw new Error(\"ajv implementation error\");\n  const err = gen.name(\"err\");\n  gen.forRange(\"i\", errsCount, names_1.default.errors, i => {\n    gen.const(err, codegen_1._`${names_1.default.vErrors}[${i}]`);\n    gen.if(codegen_1._`${err}.instancePath === undefined`, () => gen.assign(codegen_1._`${err}.instancePath`, codegen_1.strConcat(names_1.default.instancePath, it.errorPath)));\n    gen.assign(codegen_1._`${err}.schemaPath`, codegen_1.str`${it.errSchemaPath}/${keyword}`);\n\n    if (it.opts.verbose) {\n      gen.assign(codegen_1._`${err}.schema`, schemaValue);\n      gen.assign(codegen_1._`${err}.data`, data);\n    }\n  });\n}\n\nexports.extendErrors = extendErrors;\n\nfunction addError(gen, errObj) {\n  const err = gen.const(\"err\", errObj);\n  gen.if(codegen_1._`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, codegen_1._`[${err}]`), codegen_1._`${names_1.default.vErrors}.push(${err})`);\n  gen.code(codegen_1._`${names_1.default.errors}++`);\n}\n\nfunction returnErrors(it, errs) {\n  const {\n    gen,\n    validateName,\n    schemaEnv\n  } = it;\n\n  if (schemaEnv.$async) {\n    gen.throw(codegen_1._`new ${it.ValidationError}(${errs})`);\n  } else {\n    gen.assign(codegen_1._`${validateName}.errors`, errs);\n    gen.return(false);\n  }\n}\n\nconst E = {\n  keyword: new codegen_1.Name(\"keyword\"),\n  schemaPath: new codegen_1.Name(\"schemaPath\"),\n  params: new codegen_1.Name(\"params\"),\n  propertyName: new codegen_1.Name(\"propertyName\"),\n  message: new codegen_1.Name(\"message\"),\n  schema: new codegen_1.Name(\"schema\"),\n  parentSchema: new codegen_1.Name(\"parentSchema\")\n};\n\nfunction errorObjectCode(cxt, error, errorPaths) {\n  const {\n    createErrors\n  } = cxt.it;\n  if (createErrors === false) return codegen_1._`{}`;\n  return errorObject(cxt, error, errorPaths);\n}\n\nfunction errorObject(cxt, error, errorPaths = {}) {\n  const {\n    gen,\n    it\n  } = cxt;\n  const keyValues = [errorInstancePath(it, errorPaths), errorSchemaPath(cxt, errorPaths)];\n  extraErrorProps(cxt, error, keyValues);\n  return gen.object(...keyValues);\n}\n\nfunction errorInstancePath({\n  errorPath\n}, {\n  instancePath\n}) {\n  const instPath = instancePath ? codegen_1.str`${errorPath}${util_1.getErrorPath(instancePath, util_1.Type.Str)}` : errorPath;\n  return [names_1.default.instancePath, codegen_1.strConcat(names_1.default.instancePath, instPath)];\n}\n\nfunction errorSchemaPath({\n  keyword,\n  it: {\n    errSchemaPath\n  }\n}, {\n  schemaPath,\n  parentSchema\n}) {\n  let schPath = parentSchema ? errSchemaPath : codegen_1.str`${errSchemaPath}/${keyword}`;\n\n  if (schemaPath) {\n    schPath = codegen_1.str`${schPath}${util_1.getErrorPath(schemaPath, util_1.Type.Str)}`;\n  }\n\n  return [E.schemaPath, schPath];\n}\n\nfunction extraErrorProps(cxt, {\n  params,\n  message\n}, keyValues) {\n  const {\n    keyword,\n    data,\n    schemaValue,\n    it\n  } = cxt;\n  const {\n    opts,\n    propertyName,\n    topSchemaRef,\n    schemaPath\n  } = it;\n  keyValues.push([E.keyword, keyword], [E.params, typeof params == \"function\" ? params(cxt) : params || codegen_1._`{}`]);\n\n  if (opts.messages) {\n    keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message]);\n  }\n\n  if (opts.verbose) {\n    keyValues.push([E.schema, schemaValue], [E.parentSchema, codegen_1._`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);\n  }\n\n  if (propertyName) keyValues.push([E.propertyName, propertyName]);\n}","map":{"version":3,"sources":["../../lib/compile/errors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;\nconst codegen_1 = require(\"./codegen\");\nconst util_1 = require(\"./util\");\nconst names_1 = require(\"./names\");\nexports.keywordError = {\n    message: ({ keyword }) => codegen_1.str `must pass \"${keyword}\" keyword validation`,\n};\nexports.keyword$DataError = {\n    message: ({ keyword, schemaType }) => schemaType\n        ? codegen_1.str `\"${keyword}\" keyword must be ${schemaType} ($data)`\n        : codegen_1.str `\"${keyword}\" keyword is invalid ($data)`,\n};\nfunction reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {\n    const { it } = cxt;\n    const { gen, compositeRule, allErrors } = it;\n    const errObj = errorObjectCode(cxt, error, errorPaths);\n    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {\n        addError(gen, errObj);\n    }\n    else {\n        returnErrors(it, codegen_1._ `[${errObj}]`);\n    }\n}\nexports.reportError = reportError;\nfunction reportExtraError(cxt, error = exports.keywordError, errorPaths) {\n    const { it } = cxt;\n    const { gen, compositeRule, allErrors } = it;\n    const errObj = errorObjectCode(cxt, error, errorPaths);\n    addError(gen, errObj);\n    if (!(compositeRule || allErrors)) {\n        returnErrors(it, names_1.default.vErrors);\n    }\n}\nexports.reportExtraError = reportExtraError;\nfunction resetErrorsCount(gen, errsCount) {\n    gen.assign(names_1.default.errors, errsCount);\n    gen.if(codegen_1._ `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign(codegen_1._ `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));\n}\nexports.resetErrorsCount = resetErrorsCount;\nfunction extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {\n    /* istanbul ignore if */\n    if (errsCount === undefined)\n        throw new Error(\"ajv implementation error\");\n    const err = gen.name(\"err\");\n    gen.forRange(\"i\", errsCount, names_1.default.errors, (i) => {\n        gen.const(err, codegen_1._ `${names_1.default.vErrors}[${i}]`);\n        gen.if(codegen_1._ `${err}.instancePath === undefined`, () => gen.assign(codegen_1._ `${err}.instancePath`, codegen_1.strConcat(names_1.default.instancePath, it.errorPath)));\n        gen.assign(codegen_1._ `${err}.schemaPath`, codegen_1.str `${it.errSchemaPath}/${keyword}`);\n        if (it.opts.verbose) {\n            gen.assign(codegen_1._ `${err}.schema`, schemaValue);\n            gen.assign(codegen_1._ `${err}.data`, data);\n        }\n    });\n}\nexports.extendErrors = extendErrors;\nfunction addError(gen, errObj) {\n    const err = gen.const(\"err\", errObj);\n    gen.if(codegen_1._ `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, codegen_1._ `[${err}]`), codegen_1._ `${names_1.default.vErrors}.push(${err})`);\n    gen.code(codegen_1._ `${names_1.default.errors}++`);\n}\nfunction returnErrors(it, errs) {\n    const { gen, validateName, schemaEnv } = it;\n    if (schemaEnv.$async) {\n        gen.throw(codegen_1._ `new ${it.ValidationError}(${errs})`);\n    }\n    else {\n        gen.assign(codegen_1._ `${validateName}.errors`, errs);\n        gen.return(false);\n    }\n}\nconst E = {\n    keyword: new codegen_1.Name(\"keyword\"),\n    schemaPath: new codegen_1.Name(\"schemaPath\"),\n    params: new codegen_1.Name(\"params\"),\n    propertyName: new codegen_1.Name(\"propertyName\"),\n    message: new codegen_1.Name(\"message\"),\n    schema: new codegen_1.Name(\"schema\"),\n    parentSchema: new codegen_1.Name(\"parentSchema\"),\n};\nfunction errorObjectCode(cxt, error, errorPaths) {\n    const { createErrors } = cxt.it;\n    if (createErrors === false)\n        return codegen_1._ `{}`;\n    return errorObject(cxt, error, errorPaths);\n}\nfunction errorObject(cxt, error, errorPaths = {}) {\n    const { gen, it } = cxt;\n    const keyValues = [\n        errorInstancePath(it, errorPaths),\n        errorSchemaPath(cxt, errorPaths),\n    ];\n    extraErrorProps(cxt, error, keyValues);\n    return gen.object(...keyValues);\n}\nfunction errorInstancePath({ errorPath }, { instancePath }) {\n    const instPath = instancePath\n        ? codegen_1.str `${errorPath}${util_1.getErrorPath(instancePath, util_1.Type.Str)}`\n        : errorPath;\n    return [names_1.default.instancePath, codegen_1.strConcat(names_1.default.instancePath, instPath)];\n}\nfunction errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {\n    let schPath = parentSchema ? errSchemaPath : codegen_1.str `${errSchemaPath}/${keyword}`;\n    if (schemaPath) {\n        schPath = codegen_1.str `${schPath}${util_1.getErrorPath(schemaPath, util_1.Type.Str)}`;\n    }\n    return [E.schemaPath, schPath];\n}\nfunction extraErrorProps(cxt, { params, message }, keyValues) {\n    const { keyword, data, schemaValue, it } = cxt;\n    const { opts, propertyName, topSchemaRef, schemaPath } = it;\n    keyValues.push([E.keyword, keyword], [E.params, typeof params == \"function\" ? params(cxt) : params || codegen_1._ `{}`]);\n    if (opts.messages) {\n        keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message]);\n    }\n    if (opts.verbose) {\n        keyValues.push([E.schema, schemaValue], [E.parentSchema, codegen_1._ `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);\n    }\n    if (propertyName)\n        keyValues.push([E.propertyName, propertyName]);\n}\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}