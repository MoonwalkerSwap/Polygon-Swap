{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: ({\n    params: {\n      min,\n      max\n    }\n  }) => max === undefined ? codegen_1.str`must contain at least ${min} valid item(s)` : codegen_1.str`must contain at least ${min} and no more than ${max} valid item(s)`,\n  params: ({\n    params: {\n      min,\n      max\n    }\n  }) => max === undefined ? codegen_1._`{minContains: ${min}}` : codegen_1._`{minContains: ${min}, maxContains: ${max}}`\n};\nconst def = {\n  keyword: \"contains\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  trackErrors: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      parentSchema,\n      data,\n      it\n    } = cxt;\n    let min;\n    let max;\n    const {\n      minContains,\n      maxContains\n    } = parentSchema;\n\n    if (it.opts.next) {\n      min = minContains === undefined ? 1 : minContains;\n      max = maxContains;\n    } else {\n      min = 1;\n    }\n\n    const len = gen.const(\"len\", codegen_1._`${data}.length`);\n    cxt.setParams({\n      min,\n      max\n    });\n\n    if (max === undefined && min === 0) {\n      util_1.checkStrictMode(it, `\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored`);\n      return;\n    }\n\n    if (max !== undefined && min > max) {\n      util_1.checkStrictMode(it, `\"minContains\" > \"maxContains\" is always invalid`);\n      cxt.fail();\n      return;\n    }\n\n    if (util_1.alwaysValidSchema(it, schema)) {\n      let cond = codegen_1._`${len} >= ${min}`;\n      if (max !== undefined) cond = codegen_1._`${cond} && ${len} <= ${max}`;\n      cxt.pass(cond);\n      return;\n    }\n\n    it.items = true;\n    const valid = gen.name(\"valid\");\n\n    if (max === undefined && min === 1) {\n      validateItems(valid, () => gen.if(valid, () => gen.break()));\n    } else {\n      gen.let(valid, false);\n      const schValid = gen.name(\"_valid\");\n      const count = gen.let(\"count\", 0);\n      validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));\n    }\n\n    cxt.result(valid, () => cxt.reset());\n\n    function validateItems(_valid, block) {\n      gen.forRange(\"i\", 0, len, i => {\n        cxt.subschema({\n          keyword: \"contains\",\n          dataProp: i,\n          dataPropType: util_1.Type.Num,\n          compositeRule: true\n        }, _valid);\n        block();\n      });\n    }\n\n    function checkLimits(count) {\n      gen.code(codegen_1._`${count}++`);\n\n      if (max === undefined) {\n        gen.if(codegen_1._`${count} >= ${min}`, () => gen.assign(valid, true).break());\n      } else {\n        gen.if(codegen_1._`${count} > ${max}`, () => gen.assign(valid, false).break());\n        if (min === 1) gen.assign(valid, true);else gen.if(codegen_1._`${count} >= ${min}`, () => gen.assign(valid, true));\n      }\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/contains.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: ({ params: { min, max } }) => max === undefined\n        ? codegen_1.str `must contain at least ${min} valid item(s)`\n        : codegen_1.str `must contain at least ${min} and no more than ${max} valid item(s)`,\n    params: ({ params: { min, max } }) => max === undefined ? codegen_1._ `{minContains: ${min}}` : codegen_1._ `{minContains: ${min}, maxContains: ${max}}`,\n};\nconst def = {\n    keyword: \"contains\",\n    type: \"array\",\n    schemaType: [\"object\", \"boolean\"],\n    before: \"uniqueItems\",\n    trackErrors: true,\n    error,\n    code(cxt) {\n        const { gen, schema, parentSchema, data, it } = cxt;\n        let min;\n        let max;\n        const { minContains, maxContains } = parentSchema;\n        if (it.opts.next) {\n            min = minContains === undefined ? 1 : minContains;\n            max = maxContains;\n        }\n        else {\n            min = 1;\n        }\n        const len = gen.const(\"len\", codegen_1._ `${data}.length`);\n        cxt.setParams({ min, max });\n        if (max === undefined && min === 0) {\n            util_1.checkStrictMode(it, `\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored`);\n            return;\n        }\n        if (max !== undefined && min > max) {\n            util_1.checkStrictMode(it, `\"minContains\" > \"maxContains\" is always invalid`);\n            cxt.fail();\n            return;\n        }\n        if (util_1.alwaysValidSchema(it, schema)) {\n            let cond = codegen_1._ `${len} >= ${min}`;\n            if (max !== undefined)\n                cond = codegen_1._ `${cond} && ${len} <= ${max}`;\n            cxt.pass(cond);\n            return;\n        }\n        it.items = true;\n        const valid = gen.name(\"valid\");\n        if (max === undefined && min === 1) {\n            validateItems(valid, () => gen.if(valid, () => gen.break()));\n        }\n        else {\n            gen.let(valid, false);\n            const schValid = gen.name(\"_valid\");\n            const count = gen.let(\"count\", 0);\n            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));\n        }\n        cxt.result(valid, () => cxt.reset());\n        function validateItems(_valid, block) {\n            gen.forRange(\"i\", 0, len, (i) => {\n                cxt.subschema({\n                    keyword: \"contains\",\n                    dataProp: i,\n                    dataPropType: util_1.Type.Num,\n                    compositeRule: true,\n                }, _valid);\n                block();\n            });\n        }\n        function checkLimits(count) {\n            gen.code(codegen_1._ `${count}++`);\n            if (max === undefined) {\n                gen.if(codegen_1._ `${count} >= ${min}`, () => gen.assign(valid, true).break());\n            }\n            else {\n                gen.if(codegen_1._ `${count} > ${max}`, () => gen.assign(valid, false).break());\n                if (min === 1)\n                    gen.assign(valid, true);\n                else\n                    gen.if(codegen_1._ `${count} >= ${min}`, () => gen.assign(valid, true));\n            }\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=contains.js.map"]},"metadata":{},"sourceType":"script"}